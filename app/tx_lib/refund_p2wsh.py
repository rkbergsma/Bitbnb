from lib.rpc import RpcSocket
from Bitbnb.Tx_Factory import Tx_Factory
from Bitbnb.RedeemScript import RedeemScript

if __name__ == '__main__':   
    # generated by Bitbnb app when user clicks "reserve"
    txid_with_p2sh = '4485ad5bb123458ab30522db5b44f91adb4eff84ea899ac158115438d78225bf'
    serial_script = '76a914d6409f0a58cf4b524b25b6fab0dac46ae0a869f08763ac6703fdbf24b17576a9142a9a33d662a5d80406a1a48ef41c085311eb7eac88ac68'

    # from renter's wallet
    to_rpc = RpcSocket({'wallet': 'alice_wallet'})
    utxo_to_refund = to_rpc.lookup_transaction(txid_with_p2sh).tx_outs[0]   # lookup p2sh utxo by txid
    utxo_amount = utxo_to_refund.amount                                     # get the amount that can be refunded
    bitcoin_miner_fee = 500                                                 # subtract out the miner fees
    refund_amount = utxo_amount - bitcoin_miner_fee                         # calculate actual refund amount
    refund_tx_out = to_rpc.get_txout(refund_amount)                         # build txout with refund amount and new address

    # executed by Bitbnb app
    redeem_script = RedeemScript.make_from_serial(serial_script)            # build redeem_script from serial string
    transaction = Tx_Factory.make_refund(txid_with_p2sh, refund_tx_out)     # construct refund transaction

    # executed by renter's wallet
    address_used = redeem_script.get_refund_address(testnet=True)
    raw_serial_script = redeem_script.serialize()
    transaction.sign(to_rpc, True, address_used, raw_serial_script)           # sign p2sh input of funding of refund transaction
    print(transaction)
    print(transaction.serialize().hex())
    tx_id = to_rpc.send_transaction(transaction)
