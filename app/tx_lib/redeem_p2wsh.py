from lib.rpc import RpcSocket
from Bitbnb.Tx_Factory import Tx_Factory
from Bitbnb.RedeemScript import RedeemScript

if __name__ == '__main__':   
    # generated by Bitbnb app when user clicks "reserve"
    txid_with_p2sh = '5a4b0da96db9b6b8ebcf0196d8be4998903c9e384bb1ab8553acc63e5f7b8a7b'
    serial_script = '76a91438e36fc755a30589652fc01830de28bcd58178bd8763ac670313c024b17576a914ad86bcc9e99b6888c9e99019b74caece625fe98c88ac68'

    # from owner's wallet
    to_rpc = RpcSocket({'wallet': 'bob_wallet'})
    utxo_to_redeem = to_rpc.lookup_transaction(txid_with_p2sh).tx_outs[0]           # lookup p2sh utxo by txid                          
    utxo_amount = utxo_to_redeem.amount                                             # get the amount that can be redeemed
    bitcoin_miner_fee = 500                                                         # subtract out the miner fees
    redeem_amount = utxo_amount - bitcoin_miner_fee                                 # calculate actual redeem amount
    tx_out = to_rpc.get_txout(redeem_amount)                                        # build txout with redeem amount and new address

    # executed by Bitbnb app
    redeem_script = RedeemScript.make_from_serial(serial_script)                    # build redeem_script from serial string
    transaction = Tx_Factory.make_redeem(redeem_script, txid_with_p2sh, tx_out)     # construct redeem transaction
    
    # executed by renter's wallet
    address_used = redeem_script.get_owner_address(testnet=True)
    raw_serial_script = redeem_script.serialize()
    transaction.sign(to_rpc, True, address_used, raw_serial_script)           # sign p2sh input of funding of refund transaction
    print(transaction)
    print(transaction.serialize().hex())
    tx_id = to_rpc.send_transaction(transaction)